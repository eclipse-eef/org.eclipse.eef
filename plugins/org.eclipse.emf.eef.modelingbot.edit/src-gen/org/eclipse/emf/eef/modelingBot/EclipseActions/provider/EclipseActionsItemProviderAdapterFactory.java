/*******************************************************************************
 * Copyright (c) 2008, 2011 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************/
package org.eclipse.emf.eef.modelingBot.EclipseActions.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.eef.modelingBot.EclipseActions.util.EclipseActionsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EclipseActionsItemProviderAdapterFactory extends EclipseActionsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EclipseActionsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.eef.modelingBot.EclipseActions.CreateProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateProjectItemProvider createProjectItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.eef.modelingBot.EclipseActions.CreateProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateProjectAdapter() {
		if (createProjectItemProvider == null) {
			createProjectItemProvider = new CreateProjectItemProvider(this);
		}

		return createProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.eef.modelingBot.EclipseActions.OpenPerspective} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenPerspectiveItemProvider openPerspectiveItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.eef.modelingBot.EclipseActions.OpenPerspective}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenPerspectiveAdapter() {
		if (openPerspectiveItemProvider == null) {
			openPerspectiveItemProvider = new OpenPerspectiveItemProvider(this);
		}

		return openPerspectiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.eef.modelingBot.EclipseActions.CloseProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CloseProjectItemProvider closeProjectItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.eef.modelingBot.EclipseActions.CloseProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCloseProjectAdapter() {
		if (closeProjectItemProvider == null) {
			closeProjectItemProvider = new CloseProjectItemProvider(this);
		}

		return closeProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.eef.modelingBot.EclipseActions.Save} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SaveItemProvider saveItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.eef.modelingBot.EclipseActions.Save}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSaveAdapter() {
		if (saveItemProvider == null) {
			saveItemProvider = new SaveItemProvider(this);
		}

		return saveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.eef.modelingBot.EclipseActions.Undo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UndoItemProvider undoItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.eef.modelingBot.EclipseActions.Undo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUndoAdapter() {
		if (undoItemProvider == null) {
			undoItemProvider = new UndoItemProvider(this);
		}

		return undoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.eef.modelingBot.EclipseActions.Redo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RedoItemProvider redoItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.eef.modelingBot.EclipseActions.Redo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRedoAdapter() {
		if (redoItemProvider == null) {
			redoItemProvider = new RedoItemProvider(this);
		}

		return redoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.eef.modelingBot.EclipseActions.OpenProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenProjectItemProvider openProjectItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.eef.modelingBot.EclipseActions.OpenProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenProjectAdapter() {
		if (openProjectItemProvider == null) {
			openProjectItemProvider = new OpenProjectItemProvider(this);
		}

		return openProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.eef.modelingBot.EclipseActions.RemoveProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemoveProjectItemProvider removeProjectItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.eef.modelingBot.EclipseActions.RemoveProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRemoveProjectAdapter() {
		if (removeProjectItemProvider == null) {
			removeProjectItemProvider = new RemoveProjectItemProvider(this);
		}

		return removeProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.eef.modelingBot.EclipseActions.CloseEditor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CloseEditorItemProvider closeEditorItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.eef.modelingBot.EclipseActions.CloseEditor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCloseEditorAdapter() {
		if (closeEditorItemProvider == null) {
			closeEditorItemProvider = new CloseEditorItemProvider(this);
		}

		return closeEditorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.eef.modelingBot.EclipseActions.OpenEditor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenEditorItemProvider openEditorItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.eef.modelingBot.EclipseActions.OpenEditor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenEditorAdapter() {
		if (openEditorItemProvider == null) {
			openEditorItemProvider = new OpenEditorItemProvider(this);
		}

		return openEditorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.eef.modelingBot.EclipseActions.CreateModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateModelItemProvider createModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.eef.modelingBot.EclipseActions.CreateModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateModelAdapter() {
		if (createModelItemProvider == null) {
			createModelItemProvider = new CreateModelItemProvider(this);
		}

		return createModelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (createProjectItemProvider != null) createProjectItemProvider.dispose();
		if (openPerspectiveItemProvider != null) openPerspectiveItemProvider.dispose();
		if (closeProjectItemProvider != null) closeProjectItemProvider.dispose();
		if (saveItemProvider != null) saveItemProvider.dispose();
		if (undoItemProvider != null) undoItemProvider.dispose();
		if (redoItemProvider != null) redoItemProvider.dispose();
		if (openProjectItemProvider != null) openProjectItemProvider.dispose();
		if (removeProjectItemProvider != null) removeProjectItemProvider.dispose();
		if (closeEditorItemProvider != null) closeEditorItemProvider.dispose();
		if (openEditorItemProvider != null) openEditorItemProvider.dispose();
		if (createModelItemProvider != null) createModelItemProvider.dispose();
	}

}

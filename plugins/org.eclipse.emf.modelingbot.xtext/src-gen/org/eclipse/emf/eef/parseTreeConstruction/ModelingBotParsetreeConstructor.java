/*
* generated by Xtext
*/
package org.eclipse.emf.eef.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.emf.eef.services.ModelingBotGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class ModelingBotParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private ModelingBotGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Scenario_Group(this, this, 0, inst);
			case 1: return new Processings_Alternatives(this, this, 1, inst);
			case 2: return new PropertiesView_Group(this, this, 2, inst);
			case 3: return new Wizard_Group(this, this, 3, inst);
			case 4: return new Details_Group(this, this, 4, inst);
			case 5: return new SubProcessings_Alternatives(this, this, 5, inst);
			case 6: return new Action_Alternatives(this, this, 6, inst);
			case 7: return new EclipseAction_Alternatives(this, this, 7, inst);
			case 8: return new CreateProject_Group(this, this, 8, inst);
			case 9: return new RemoveProject_Group(this, this, 9, inst);
			case 10: return new ReferenceableObject_Alternatives(this, this, 10, inst);
			case 11: return new CreateModel_Group(this, this, 11, inst);
			case 12: return new Save_Group(this, this, 12, inst);
			case 13: return new EEFAction_Alternatives(this, this, 13, inst);
			case 14: return new Check_Group(this, this, 14, inst);
			case 15: return new Add_Group(this, this, 15, inst);
			case 16: return new SetAttribute_Group(this, this, 16, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Scenario ****************
 *
 * Scenario returns mbot::Scenario:
 * 	"scenario" name=EString "{" processings+=Processings* "}";
 *
 **/

// "scenario" name=EString "{" processings+=Processings* "}"
protected class Scenario_Group extends GroupToken {
	
	public Scenario_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getScenarioAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Scenario_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getScenarioRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "scenario"
protected class Scenario_ScenarioKeyword_0 extends KeywordToken  {
	
	public Scenario_ScenarioKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getScenarioAccess().getScenarioKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=EString
protected class Scenario_NameAssignment_1 extends AssignmentToken  {
	
	public Scenario_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getScenarioAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Scenario_ScenarioKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getScenarioAccess().getNameEStringParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getScenarioAccess().getNameEStringParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class Scenario_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public Scenario_LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getScenarioAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Scenario_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// processings+=Processings*
protected class Scenario_ProcessingsAssignment_3 extends AssignmentToken  {
	
	public Scenario_ProcessingsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getScenarioAccess().getProcessingsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Processings_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("processings",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("processings");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcessingsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getScenarioAccess().getProcessingsProcessingsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Scenario_ProcessingsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Scenario_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Scenario_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public Scenario_RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getScenarioAccess().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Scenario_ProcessingsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Scenario_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule Scenario ****************/


/************ begin Rule Processings ****************
 *
 * Processings returns mbot::Processing:
 * 	Details | Wizard | PropertiesView | Action;
 *
 **/

// Details | Wizard | PropertiesView | Action
protected class Processings_Alternatives extends AlternativesToken {

	public Processings_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getProcessingsAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Processings_DetailsParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Processings_WizardParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Processings_PropertiesViewParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Processings_ActionParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCheckAccess().getCheckAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCreateModelRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCreateProjectRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDetailsRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPropertiesViewRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRemoveProjectRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSaveAccess().getSaveAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetAttributeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWizardRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Details
protected class Processings_DetailsParserRuleCall_0 extends RuleCallToken {
	
	public Processings_DetailsParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getProcessingsAccess().getDetailsParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Details_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDetailsRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Details_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Wizard
protected class Processings_WizardParserRuleCall_1 extends RuleCallToken {
	
	public Processings_WizardParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getProcessingsAccess().getWizardParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Wizard_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWizardRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Wizard_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// PropertiesView
protected class Processings_PropertiesViewParserRuleCall_2 extends RuleCallToken {
	
	public Processings_PropertiesViewParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getProcessingsAccess().getPropertiesViewParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropertiesView_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPropertiesViewRule().getType().getClassifier())
			return null;
		if(checkForRecursion(PropertiesView_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Action
protected class Processings_ActionParserRuleCall_3 extends RuleCallToken {
	
	public Processings_ActionParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getProcessingsAccess().getActionParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Action_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCheckAccess().getCheckAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCreateModelRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCreateProjectRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRemoveProjectRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSaveAccess().getSaveAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetAttributeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Action_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Processings ****************/


/************ begin Rule PropertiesView ****************
 *
 * PropertiesView returns mbot::PropertiesView:
 * 	"propertiesView" name=EString? "{" processings+=SubProcessings* "}";
 *
 **/

// "propertiesView" name=EString? "{" processings+=SubProcessings* "}"
protected class PropertiesView_Group extends GroupToken {
	
	public PropertiesView_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPropertiesViewAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropertiesView_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPropertiesViewRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "propertiesView"
protected class PropertiesView_PropertiesViewKeyword_0 extends KeywordToken  {
	
	public PropertiesView_PropertiesViewKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertiesViewAccess().getPropertiesViewKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=EString?
protected class PropertiesView_NameAssignment_1 extends AssignmentToken  {
	
	public PropertiesView_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertiesViewAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropertiesView_PropertiesViewKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPropertiesViewAccess().getNameEStringParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getPropertiesViewAccess().getNameEStringParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class PropertiesView_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public PropertiesView_LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertiesViewAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropertiesView_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PropertiesView_PropertiesViewKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// processings+=SubProcessings*
protected class PropertiesView_ProcessingsAssignment_3 extends AssignmentToken  {
	
	public PropertiesView_ProcessingsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertiesViewAccess().getProcessingsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SubProcessings_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("processings",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("processings");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSubProcessingsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPropertiesViewAccess().getProcessingsSubProcessingsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PropertiesView_ProcessingsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new PropertiesView_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class PropertiesView_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public PropertiesView_RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertiesViewAccess().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropertiesView_ProcessingsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PropertiesView_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule PropertiesView ****************/


/************ begin Rule Wizard ****************
 *
 * Wizard returns mbot::Wizard:
 * 	"wizard" name=EString? "{" processings+=SubProcessings* "}";
 *
 **/

// "wizard" name=EString? "{" processings+=SubProcessings* "}"
protected class Wizard_Group extends GroupToken {
	
	public Wizard_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWizardAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Wizard_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWizardRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "wizard"
protected class Wizard_WizardKeyword_0 extends KeywordToken  {
	
	public Wizard_WizardKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWizardAccess().getWizardKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=EString?
protected class Wizard_NameAssignment_1 extends AssignmentToken  {
	
	public Wizard_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWizardAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Wizard_WizardKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWizardAccess().getNameEStringParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getWizardAccess().getNameEStringParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class Wizard_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public Wizard_LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWizardAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Wizard_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Wizard_WizardKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// processings+=SubProcessings*
protected class Wizard_ProcessingsAssignment_3 extends AssignmentToken  {
	
	public Wizard_ProcessingsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWizardAccess().getProcessingsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SubProcessings_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("processings",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("processings");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSubProcessingsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWizardAccess().getProcessingsSubProcessingsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Wizard_ProcessingsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Wizard_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Wizard_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public Wizard_RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWizardAccess().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Wizard_ProcessingsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Wizard_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule Wizard ****************/


/************ begin Rule Details ****************
 *
 * Details returns mbot::DetailsPage:
 * 	"detailsPage" name=EString? "{" processings+=SubProcessings* "}";
 *
 **/

// "detailsPage" name=EString? "{" processings+=SubProcessings* "}"
protected class Details_Group extends GroupToken {
	
	public Details_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDetailsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Details_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDetailsRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "detailsPage"
protected class Details_DetailsPageKeyword_0 extends KeywordToken  {
	
	public Details_DetailsPageKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDetailsAccess().getDetailsPageKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=EString?
protected class Details_NameAssignment_1 extends AssignmentToken  {
	
	public Details_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDetailsAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Details_DetailsPageKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDetailsAccess().getNameEStringParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getDetailsAccess().getNameEStringParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class Details_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public Details_LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDetailsAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Details_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Details_DetailsPageKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// processings+=SubProcessings*
protected class Details_ProcessingsAssignment_3 extends AssignmentToken  {
	
	public Details_ProcessingsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDetailsAccess().getProcessingsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SubProcessings_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("processings",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("processings");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSubProcessingsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDetailsAccess().getProcessingsSubProcessingsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Details_ProcessingsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Details_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Details_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public Details_RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDetailsAccess().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Details_ProcessingsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Details_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule Details ****************/


/************ begin Rule SubProcessings ****************
 *
 * SubProcessings returns mbot::Processing:
 * 	Wizard | Details | PropertiesView | Action;
 *
 **/

// Wizard | Details | PropertiesView | Action
protected class SubProcessings_Alternatives extends AlternativesToken {

	public SubProcessings_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSubProcessingsAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SubProcessings_WizardParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SubProcessings_DetailsParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SubProcessings_PropertiesViewParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new SubProcessings_ActionParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCheckAccess().getCheckAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCreateModelRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCreateProjectRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDetailsRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPropertiesViewRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRemoveProjectRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSaveAccess().getSaveAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetAttributeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWizardRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Wizard
protected class SubProcessings_WizardParserRuleCall_0 extends RuleCallToken {
	
	public SubProcessings_WizardParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSubProcessingsAccess().getWizardParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Wizard_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWizardRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Wizard_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Details
protected class SubProcessings_DetailsParserRuleCall_1 extends RuleCallToken {
	
	public SubProcessings_DetailsParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSubProcessingsAccess().getDetailsParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Details_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDetailsRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Details_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// PropertiesView
protected class SubProcessings_PropertiesViewParserRuleCall_2 extends RuleCallToken {
	
	public SubProcessings_PropertiesViewParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSubProcessingsAccess().getPropertiesViewParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PropertiesView_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPropertiesViewRule().getType().getClassifier())
			return null;
		if(checkForRecursion(PropertiesView_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Action
protected class SubProcessings_ActionParserRuleCall_3 extends RuleCallToken {
	
	public SubProcessings_ActionParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSubProcessingsAccess().getActionParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Action_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCheckAccess().getCheckAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCreateModelRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCreateProjectRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRemoveProjectRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSaveAccess().getSaveAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetAttributeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Action_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule SubProcessings ****************/


/************ begin Rule Action ****************
 *
 * Action returns mbot::Action:
 * 	EclipseAction | EEFAction;
 *
 **/

// EclipseAction | EEFAction
protected class Action_Alternatives extends AlternativesToken {

	public Action_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getActionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Action_EclipseActionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Action_EEFActionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCheckAccess().getCheckAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCreateModelRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCreateProjectRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRemoveProjectRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSaveAccess().getSaveAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetAttributeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// EclipseAction
protected class Action_EclipseActionParserRuleCall_0 extends RuleCallToken {
	
	public Action_EclipseActionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getActionAccess().getEclipseActionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EclipseAction_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCreateModelRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCreateProjectRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRemoveProjectRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSaveAccess().getSaveAction_1().getType().getClassifier())
			return null;
		if(checkForRecursion(EclipseAction_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// EEFAction
protected class Action_EEFActionParserRuleCall_1 extends RuleCallToken {
	
	public Action_EEFActionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getActionAccess().getEEFActionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EEFAction_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCheckAccess().getCheckAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetAttributeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(EEFAction_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Action ****************/


/************ begin Rule EclipseAction ****************
 *
 * EclipseAction returns EclipseActions::EclipseAction:
 * 	CreateProject | CreateModel | Save | RemoveProject;
 *
 **/

// CreateProject | CreateModel | Save | RemoveProject
protected class EclipseAction_Alternatives extends AlternativesToken {

	public EclipseAction_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEclipseActionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EclipseAction_CreateProjectParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EclipseAction_CreateModelParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new EclipseAction_SaveParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new EclipseAction_RemoveProjectParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCreateModelRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCreateProjectRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRemoveProjectRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSaveAccess().getSaveAction_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// CreateProject
protected class EclipseAction_CreateProjectParserRuleCall_0 extends RuleCallToken {
	
	public EclipseAction_CreateProjectParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEclipseActionAccess().getCreateProjectParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CreateProject_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCreateProjectRule().getType().getClassifier())
			return null;
		if(checkForRecursion(CreateProject_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// CreateModel
protected class EclipseAction_CreateModelParserRuleCall_1 extends RuleCallToken {
	
	public EclipseAction_CreateModelParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEclipseActionAccess().getCreateModelParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CreateModel_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCreateModelRule().getType().getClassifier())
			return null;
		if(checkForRecursion(CreateModel_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Save
protected class EclipseAction_SaveParserRuleCall_2 extends RuleCallToken {
	
	public EclipseAction_SaveParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEclipseActionAccess().getSaveParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Save_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSaveAccess().getSaveAction_1().getType().getClassifier())
			return null;
		if(checkForRecursion(Save_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// RemoveProject
protected class EclipseAction_RemoveProjectParserRuleCall_3 extends RuleCallToken {
	
	public EclipseAction_RemoveProjectParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEclipseActionAccess().getRemoveProjectParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RemoveProject_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRemoveProjectRule().getType().getClassifier())
			return null;
		if(checkForRecursion(RemoveProject_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule EclipseAction ****************/


/************ begin Rule CreateProject ****************
 *
 * CreateProject returns EclipseActions::CreateProject:
 * 	"createProject" projectName=EString;
 *
 **/

// "createProject" projectName=EString
protected class CreateProject_Group extends GroupToken {
	
	public CreateProject_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCreateProjectAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CreateProject_ProjectNameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCreateProjectRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "createProject"
protected class CreateProject_CreateProjectKeyword_0 extends KeywordToken  {
	
	public CreateProject_CreateProjectKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCreateProjectAccess().getCreateProjectKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// projectName=EString
protected class CreateProject_ProjectNameAssignment_1 extends AssignmentToken  {
	
	public CreateProject_ProjectNameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCreateProjectAccess().getProjectNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CreateProject_CreateProjectKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("projectName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("projectName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCreateProjectAccess().getProjectNameEStringParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getCreateProjectAccess().getProjectNameEStringParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule CreateProject ****************/


/************ begin Rule RemoveProject ****************
 *
 * RemoveProject returns EclipseActions::RemoveProject:
 * 	"deleteProject" projectName=EString;
 *
 **/

// "deleteProject" projectName=EString
protected class RemoveProject_Group extends GroupToken {
	
	public RemoveProject_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRemoveProjectAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RemoveProject_ProjectNameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRemoveProjectRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "deleteProject"
protected class RemoveProject_DeleteProjectKeyword_0 extends KeywordToken  {
	
	public RemoveProject_DeleteProjectKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRemoveProjectAccess().getDeleteProjectKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// projectName=EString
protected class RemoveProject_ProjectNameAssignment_1 extends AssignmentToken  {
	
	public RemoveProject_ProjectNameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRemoveProjectAccess().getProjectNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RemoveProject_DeleteProjectKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("projectName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("projectName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRemoveProjectAccess().getProjectNameEStringParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getRemoveProjectAccess().getProjectNameEStringParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule RemoveProject ****************/


/************ begin Rule ReferenceableObject ****************
 *
 * ReferenceableObject returns EEFExtended::ReferenceableObject:
 * 	CreateModel | Add;
 *
 **/

// CreateModel | Add
protected class ReferenceableObject_Alternatives extends AlternativesToken {

	public ReferenceableObject_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getReferenceableObjectAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferenceableObject_CreateModelParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ReferenceableObject_AddParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCreateModelRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// CreateModel
protected class ReferenceableObject_CreateModelParserRuleCall_0 extends RuleCallToken {
	
	public ReferenceableObject_CreateModelParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getReferenceableObjectAccess().getCreateModelParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CreateModel_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCreateModelRule().getType().getClassifier())
			return null;
		if(checkForRecursion(CreateModel_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Add
protected class ReferenceableObject_AddParserRuleCall_1 extends RuleCallToken {
	
	public ReferenceableObject_AddParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getReferenceableObjectAccess().getAddParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Add_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Add_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ReferenceableObject ****************/


/************ begin Rule CreateModel ****************
 *
 * CreateModel returns EclipseActions::CreateModel:
 * 	"createObject" referenceName=ID ":" rootURI=EString "inResource" modelName=EString "at" path=EString;
 *
 **/

// "createObject" referenceName=ID ":" rootURI=EString "inResource" modelName=EString "at" path=EString
protected class CreateModel_Group extends GroupToken {
	
	public CreateModel_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCreateModelAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CreateModel_PathAssignment_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCreateModelRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "createObject"
protected class CreateModel_CreateObjectKeyword_0 extends KeywordToken  {
	
	public CreateModel_CreateObjectKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCreateModelAccess().getCreateObjectKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// referenceName=ID
protected class CreateModel_ReferenceNameAssignment_1 extends AssignmentToken  {
	
	public CreateModel_ReferenceNameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCreateModelAccess().getReferenceNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CreateModel_CreateObjectKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("referenceName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("referenceName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCreateModelAccess().getReferenceNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getCreateModelAccess().getReferenceNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class CreateModel_ColonKeyword_2 extends KeywordToken  {
	
	public CreateModel_ColonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCreateModelAccess().getColonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CreateModel_ReferenceNameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// rootURI=EString
protected class CreateModel_RootURIAssignment_3 extends AssignmentToken  {
	
	public CreateModel_RootURIAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCreateModelAccess().getRootURIAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CreateModel_ColonKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rootURI",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rootURI");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCreateModelAccess().getRootURIEStringParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getCreateModelAccess().getRootURIEStringParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "inResource"
protected class CreateModel_InResourceKeyword_4 extends KeywordToken  {
	
	public CreateModel_InResourceKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCreateModelAccess().getInResourceKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CreateModel_RootURIAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// modelName=EString
protected class CreateModel_ModelNameAssignment_5 extends AssignmentToken  {
	
	public CreateModel_ModelNameAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCreateModelAccess().getModelNameAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CreateModel_InResourceKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("modelName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("modelName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCreateModelAccess().getModelNameEStringParserRuleCall_5_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getCreateModelAccess().getModelNameEStringParserRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// "at"
protected class CreateModel_AtKeyword_6 extends KeywordToken  {
	
	public CreateModel_AtKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCreateModelAccess().getAtKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CreateModel_ModelNameAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// path=EString
protected class CreateModel_PathAssignment_7 extends AssignmentToken  {
	
	public CreateModel_PathAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCreateModelAccess().getPathAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CreateModel_AtKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("path",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("path");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCreateModelAccess().getPathEStringParserRuleCall_7_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getCreateModelAccess().getPathEStringParserRuleCall_7_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule CreateModel ****************/


/************ begin Rule Save ****************
 *
 * Save returns EclipseActions::Save:
 * 	"save" {EclipseActions::Save};
 *
 **/

// "save" {EclipseActions::Save}
protected class Save_Group extends GroupToken {
	
	public Save_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSaveAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Save_SaveAction_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSaveAccess().getSaveAction_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "save"
protected class Save_SaveKeyword_0 extends KeywordToken  {
	
	public Save_SaveKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSaveAccess().getSaveKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {EclipseActions::Save}
protected class Save_SaveAction_1 extends ActionToken  {

	public Save_SaveAction_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSaveAccess().getSaveAction_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Save_SaveKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}


/************ end Rule Save ****************/


/************ begin Rule EEFAction ****************
 *
 * EEFAction returns EEFActions::EEFAction:
 * 	Check | Add | SetAttribute;
 *
 **/

// Check | Add | SetAttribute
protected class EEFAction_Alternatives extends AlternativesToken {

	public EEFAction_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEEFActionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EEFAction_CheckParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EEFAction_AddParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new EEFAction_SetAttributeParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCheckAccess().getCheckAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSetAttributeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Check
protected class EEFAction_CheckParserRuleCall_0 extends RuleCallToken {
	
	public EEFAction_CheckParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEEFActionAccess().getCheckParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Check_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCheckAccess().getCheckAction_1().getType().getClassifier())
			return null;
		if(checkForRecursion(Check_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Add
protected class EEFAction_AddParserRuleCall_1 extends RuleCallToken {
	
	public EEFAction_AddParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEEFActionAccess().getAddParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Add_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Add_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SetAttribute
protected class EEFAction_SetAttributeParserRuleCall_2 extends RuleCallToken {
	
	public EEFAction_SetAttributeParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEEFActionAccess().getSetAttributeParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetAttribute_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSetAttributeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SetAttribute_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule EEFAction ****************/


/************ begin Rule Check ****************
 *
 * Check returns EEFActions::Check:
 * 	"check!" {EEFActions::Check};
 *
 **/

// "check!" {EEFActions::Check}
protected class Check_Group extends GroupToken {
	
	public Check_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCheckAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Check_CheckAction_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCheckAccess().getCheckAction_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "check!"
protected class Check_CheckKeyword_0 extends KeywordToken  {
	
	public Check_CheckKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCheckAccess().getCheckKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {EEFActions::Check}
protected class Check_CheckAction_1 extends ActionToken  {

	public Check_CheckAction_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCheckAccess().getCheckAction_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Check_CheckKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}


/************ end Rule Check ****************/


/************ begin Rule Add ****************
 *
 * Add returns EEFActions::Add:
 * 	"createObject" referenceName=ID ":" typeURI=EString "inElement" referenceableObject=[EEFExtended::ReferenceableObject]
 * 	"inFeature" eContainingFeatureURI=EString;
 *
 **/

// "createObject" referenceName=ID ":" typeURI=EString "inElement" referenceableObject=[EEFExtended::ReferenceableObject]
// "inFeature" eContainingFeatureURI=EString
protected class Add_Group extends GroupToken {
	
	public Add_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAddAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Add_EContainingFeatureURIAssignment_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "createObject"
protected class Add_CreateObjectKeyword_0 extends KeywordToken  {
	
	public Add_CreateObjectKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAddAccess().getCreateObjectKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// referenceName=ID
protected class Add_ReferenceNameAssignment_1 extends AssignmentToken  {
	
	public Add_ReferenceNameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddAccess().getReferenceNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Add_CreateObjectKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("referenceName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("referenceName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAddAccess().getReferenceNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAddAccess().getReferenceNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class Add_ColonKeyword_2 extends KeywordToken  {
	
	public Add_ColonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAddAccess().getColonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Add_ReferenceNameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// typeURI=EString
protected class Add_TypeURIAssignment_3 extends AssignmentToken  {
	
	public Add_TypeURIAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddAccess().getTypeURIAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Add_ColonKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("typeURI",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("typeURI");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAddAccess().getTypeURIEStringParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAddAccess().getTypeURIEStringParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "inElement"
protected class Add_InElementKeyword_4 extends KeywordToken  {
	
	public Add_InElementKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAddAccess().getInElementKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Add_TypeURIAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// referenceableObject=[EEFExtended::ReferenceableObject]
protected class Add_ReferenceableObjectAssignment_5 extends AssignmentToken  {
	
	public Add_ReferenceableObjectAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddAccess().getReferenceableObjectAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Add_InElementKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("referenceableObject",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("referenceableObject");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAddAccess().getReferenceableObjectReferenceableObjectCrossReference_5_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getAddAccess().getReferenceableObjectReferenceableObjectCrossReference_5_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "inFeature"
protected class Add_InFeatureKeyword_6 extends KeywordToken  {
	
	public Add_InFeatureKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAddAccess().getInFeatureKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Add_ReferenceableObjectAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// eContainingFeatureURI=EString
protected class Add_EContainingFeatureURIAssignment_7 extends AssignmentToken  {
	
	public Add_EContainingFeatureURIAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddAccess().getEContainingFeatureURIAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Add_InFeatureKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eContainingFeatureURI",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eContainingFeatureURI");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAddAccess().getEContainingFeatureURIEStringParserRuleCall_7_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAddAccess().getEContainingFeatureURIEStringParserRuleCall_7_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Add ****************/


/************ begin Rule SetAttribute ****************
 *
 * SetAttribute returns EEFActions::SetAttribute:
 * 	"set" referenceableObject=[EEFExtended::ReferenceableObject] "values" values+=EString ("," values+=EString)*
 * 	"inFeature" eContainingFeatureURI=EString ("usingWidget" propertiesEditionElementURI=EString)?;
 *
 **/

// "set" referenceableObject=[EEFExtended::ReferenceableObject] "values" values+=EString ("," values+=EString)* "inFeature"
// eContainingFeatureURI=EString ("usingWidget" propertiesEditionElementURI=EString)?
protected class SetAttribute_Group extends GroupToken {
	
	public SetAttribute_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetAttributeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetAttribute_Group_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SetAttribute_EContainingFeatureURIAssignment_6(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSetAttributeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "set"
protected class SetAttribute_SetKeyword_0 extends KeywordToken  {
	
	public SetAttribute_SetKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetAttributeAccess().getSetKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// referenceableObject=[EEFExtended::ReferenceableObject]
protected class SetAttribute_ReferenceableObjectAssignment_1 extends AssignmentToken  {
	
	public SetAttribute_ReferenceableObjectAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetAttributeAccess().getReferenceableObjectAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetAttribute_SetKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("referenceableObject",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("referenceableObject");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSetAttributeAccess().getReferenceableObjectReferenceableObjectCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getSetAttributeAccess().getReferenceableObjectReferenceableObjectCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "values"
protected class SetAttribute_ValuesKeyword_2 extends KeywordToken  {
	
	public SetAttribute_ValuesKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetAttributeAccess().getValuesKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetAttribute_ReferenceableObjectAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// values+=EString
protected class SetAttribute_ValuesAssignment_3 extends AssignmentToken  {
	
	public SetAttribute_ValuesAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetAttributeAccess().getValuesAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetAttribute_ValuesKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetAttributeAccess().getValuesEStringParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSetAttributeAccess().getValuesEStringParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("," values+=EString)*
protected class SetAttribute_Group_4 extends GroupToken {
	
	public SetAttribute_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetAttributeAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetAttribute_ValuesAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class SetAttribute_CommaKeyword_4_0 extends KeywordToken  {
	
	public SetAttribute_CommaKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetAttributeAccess().getCommaKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetAttribute_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SetAttribute_ValuesAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// values+=EString
protected class SetAttribute_ValuesAssignment_4_1 extends AssignmentToken  {
	
	public SetAttribute_ValuesAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetAttributeAccess().getValuesAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetAttribute_CommaKeyword_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetAttributeAccess().getValuesEStringParserRuleCall_4_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSetAttributeAccess().getValuesEStringParserRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}


// "inFeature"
protected class SetAttribute_InFeatureKeyword_5 extends KeywordToken  {
	
	public SetAttribute_InFeatureKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetAttributeAccess().getInFeatureKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetAttribute_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SetAttribute_ValuesAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// eContainingFeatureURI=EString
protected class SetAttribute_EContainingFeatureURIAssignment_6 extends AssignmentToken  {
	
	public SetAttribute_EContainingFeatureURIAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetAttributeAccess().getEContainingFeatureURIAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetAttribute_InFeatureKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eContainingFeatureURI",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eContainingFeatureURI");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetAttributeAccess().getEContainingFeatureURIEStringParserRuleCall_6_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSetAttributeAccess().getEContainingFeatureURIEStringParserRuleCall_6_0();
			return obj;
		}
		return null;
	}

}

// ("usingWidget" propertiesEditionElementURI=EString)?
protected class SetAttribute_Group_7 extends GroupToken {
	
	public SetAttribute_Group_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetAttributeAccess().getGroup_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetAttribute_PropertiesEditionElementURIAssignment_7_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "usingWidget"
protected class SetAttribute_UsingWidgetKeyword_7_0 extends KeywordToken  {
	
	public SetAttribute_UsingWidgetKeyword_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetAttributeAccess().getUsingWidgetKeyword_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetAttribute_EContainingFeatureURIAssignment_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// propertiesEditionElementURI=EString
protected class SetAttribute_PropertiesEditionElementURIAssignment_7_1 extends AssignmentToken  {
	
	public SetAttribute_PropertiesEditionElementURIAssignment_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetAttributeAccess().getPropertiesEditionElementURIAssignment_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetAttribute_UsingWidgetKeyword_7_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("propertiesEditionElementURI",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("propertiesEditionElementURI");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetAttributeAccess().getPropertiesEditionElementURIEStringParserRuleCall_7_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSetAttributeAccess().getPropertiesEditionElementURIEStringParserRuleCall_7_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule SetAttribute ****************/


}

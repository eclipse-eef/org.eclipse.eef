/*
* generated by Xtext
*/
package org.eclipse.emf.eef.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ModelingBotGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProcessingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcessingsEEFProcessingsParserRuleCall_3_0 = (RuleCall)cProcessingsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Scenario returns mbot::Scenario:
		//
		//	"scenario" name=EString "{" processings+=EEFProcessings* "}";
		public ParserRule getRule() { return rule; }

		//"scenario" name=EString "{" processings+=EEFProcessings* "}"
		public Group getGroup() { return cGroup; }

		//"scenario"
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//processings+=EEFProcessings*
		public Assignment getProcessingsAssignment_3() { return cProcessingsAssignment_3; }

		//EEFProcessings
		public RuleCall getProcessingsEEFProcessingsParserRuleCall_3_0() { return cProcessingsEEFProcessingsParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EEFProcessingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EEFProcessings");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDetailsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWizardParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPropertiesViewParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//EEFProcessings returns mbot::Processing:
		//
		//	Details | Wizard | PropertiesView;
		public ParserRule getRule() { return rule; }

		//Details | Wizard | PropertiesView
		public Alternatives getAlternatives() { return cAlternatives; }

		//Details
		public RuleCall getDetailsParserRuleCall_0() { return cDetailsParserRuleCall_0; }

		//Wizard
		public RuleCall getWizardParserRuleCall_1() { return cWizardParserRuleCall_1; }

		//PropertiesView
		public RuleCall getPropertiesViewParserRuleCall_2() { return cPropertiesViewParserRuleCall_2; }
	}

	public class PropertiesViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertiesView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertiesViewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProcessingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcessingsSubProcessingsParserRuleCall_3_0 = (RuleCall)cProcessingsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PropertiesView returns mbot::PropertiesView:
		//
		//	"propertiesView" name=EString? "{" processings+=SubProcessings* "}";
		public ParserRule getRule() { return rule; }

		//"propertiesView" name=EString? "{" processings+=SubProcessings* "}"
		public Group getGroup() { return cGroup; }

		//"propertiesView"
		public Keyword getPropertiesViewKeyword_0() { return cPropertiesViewKeyword_0; }

		//name=EString?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//processings+=SubProcessings*
		public Assignment getProcessingsAssignment_3() { return cProcessingsAssignment_3; }

		//SubProcessings
		public RuleCall getProcessingsSubProcessingsParserRuleCall_3_0() { return cProcessingsSubProcessingsParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class WizardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Wizard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWizardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProcessingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcessingsSubProcessingsParserRuleCall_3_0 = (RuleCall)cProcessingsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Wizard returns mbot::Wizard:
		//
		//	"wizard" name=EString? "{" processings+=SubProcessings* "}";
		public ParserRule getRule() { return rule; }

		//"wizard" name=EString? "{" processings+=SubProcessings* "}"
		public Group getGroup() { return cGroup; }

		//"wizard"
		public Keyword getWizardKeyword_0() { return cWizardKeyword_0; }

		//name=EString?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//processings+=SubProcessings*
		public Assignment getProcessingsAssignment_3() { return cProcessingsAssignment_3; }

		//SubProcessings
		public RuleCall getProcessingsSubProcessingsParserRuleCall_3_0() { return cProcessingsSubProcessingsParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DetailsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Details");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDetailsPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProcessingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcessingsSubProcessingsParserRuleCall_3_0 = (RuleCall)cProcessingsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Details returns mbot::DetailsPage:
		//
		//	"detailsPage" name=EString? "{" processings+=SubProcessings* "}";
		public ParserRule getRule() { return rule; }

		//"detailsPage" name=EString? "{" processings+=SubProcessings* "}"
		public Group getGroup() { return cGroup; }

		//"detailsPage"
		public Keyword getDetailsPageKeyword_0() { return cDetailsPageKeyword_0; }

		//name=EString?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//processings+=SubProcessings*
		public Assignment getProcessingsAssignment_3() { return cProcessingsAssignment_3; }

		//SubProcessings
		public RuleCall getProcessingsSubProcessingsParserRuleCall_3_0() { return cProcessingsSubProcessingsParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SubProcessingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubProcessings");
		private final RuleCall cWizardParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SubProcessings returns mbot::Processing:
		//
		//	Wizard;
		public ParserRule getRule() { return rule; }

		//Wizard
		public RuleCall getWizardParserRuleCall() { return cWizardParserRuleCall; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private ScenarioElements pScenario;
	private EEFProcessingsElements pEEFProcessings;
	private PropertiesViewElements pPropertiesView;
	private WizardElements pWizard;
	private DetailsElements pDetails;
	private SubProcessingsElements pSubProcessings;
	private EStringElements pEString;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ModelingBotGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.emf.eef.ModelingBot".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Scenario returns mbot::Scenario:
	//
	//	"scenario" name=EString "{" processings+=EEFProcessings* "}";
	public ScenarioElements getScenarioAccess() {
		return (pScenario != null) ? pScenario : (pScenario = new ScenarioElements());
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}

	//EEFProcessings returns mbot::Processing:
	//
	//	Details | Wizard | PropertiesView;
	public EEFProcessingsElements getEEFProcessingsAccess() {
		return (pEEFProcessings != null) ? pEEFProcessings : (pEEFProcessings = new EEFProcessingsElements());
	}
	
	public ParserRule getEEFProcessingsRule() {
		return getEEFProcessingsAccess().getRule();
	}

	//PropertiesView returns mbot::PropertiesView:
	//
	//	"propertiesView" name=EString? "{" processings+=SubProcessings* "}";
	public PropertiesViewElements getPropertiesViewAccess() {
		return (pPropertiesView != null) ? pPropertiesView : (pPropertiesView = new PropertiesViewElements());
	}
	
	public ParserRule getPropertiesViewRule() {
		return getPropertiesViewAccess().getRule();
	}

	//Wizard returns mbot::Wizard:
	//
	//	"wizard" name=EString? "{" processings+=SubProcessings* "}";
	public WizardElements getWizardAccess() {
		return (pWizard != null) ? pWizard : (pWizard = new WizardElements());
	}
	
	public ParserRule getWizardRule() {
		return getWizardAccess().getRule();
	}

	//Details returns mbot::DetailsPage:
	//
	//	"detailsPage" name=EString? "{" processings+=SubProcessings* "}";
	public DetailsElements getDetailsAccess() {
		return (pDetails != null) ? pDetails : (pDetails = new DetailsElements());
	}
	
	public ParserRule getDetailsRule() {
		return getDetailsAccess().getRule();
	}

	//SubProcessings returns mbot::Processing:
	//
	//	Wizard;
	public SubProcessingsElements getSubProcessingsAccess() {
		return (pSubProcessings != null) ? pSubProcessings : (pSubProcessings = new SubProcessingsElements());
	}
	
	public ParserRule getSubProcessingsRule() {
		return getSubProcessingsAccess().getRule();
	}

	//EString returns ecore::EString:
	//
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

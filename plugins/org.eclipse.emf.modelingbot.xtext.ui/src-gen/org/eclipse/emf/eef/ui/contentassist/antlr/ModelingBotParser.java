/*
* generated by Xtext
*/
package org.eclipse.emf.eef.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.emf.eef.services.ModelingBotGrammarAccess;

public class ModelingBotParser extends AbstractContentAssistParser {
	
	@Inject
	private ModelingBotGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.emf.eef.ui.contentassist.antlr.internal.InternalModelingBotParser createParser() {
		org.eclipse.emf.eef.ui.contentassist.antlr.internal.InternalModelingBotParser result = new org.eclipse.emf.eef.ui.contentassist.antlr.internal.InternalModelingBotParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEEFProcessingsAccess().getAlternatives(), "rule__EEFProcessings__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getScenarioAccess().getGroup(), "rule__Scenario__Group__0");
					put(grammarAccess.getPropertiesViewAccess().getGroup(), "rule__PropertiesView__Group__0");
					put(grammarAccess.getWizardAccess().getGroup(), "rule__Wizard__Group__0");
					put(grammarAccess.getDetailsAccess().getGroup(), "rule__Details__Group__0");
					put(grammarAccess.getScenarioAccess().getNameAssignment_1(), "rule__Scenario__NameAssignment_1");
					put(grammarAccess.getScenarioAccess().getProcessingsAssignment_3(), "rule__Scenario__ProcessingsAssignment_3");
					put(grammarAccess.getPropertiesViewAccess().getNameAssignment_1(), "rule__PropertiesView__NameAssignment_1");
					put(grammarAccess.getPropertiesViewAccess().getProcessingsAssignment_3(), "rule__PropertiesView__ProcessingsAssignment_3");
					put(grammarAccess.getWizardAccess().getNameAssignment_1(), "rule__Wizard__NameAssignment_1");
					put(grammarAccess.getWizardAccess().getProcessingsAssignment_3(), "rule__Wizard__ProcessingsAssignment_3");
					put(grammarAccess.getDetailsAccess().getNameAssignment_1(), "rule__Details__NameAssignment_1");
					put(grammarAccess.getDetailsAccess().getProcessingsAssignment_3(), "rule__Details__ProcessingsAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.emf.eef.ui.contentassist.antlr.internal.InternalModelingBotParser typedParser = (org.eclipse.emf.eef.ui.contentassist.antlr.internal.InternalModelingBotParser) parser;
			typedParser.entryRuleScenario();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ModelingBotGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ModelingBotGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
